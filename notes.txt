Ch1: Environment

javac = turns java source file into class bytecode

java = executes program

jar = packages all files tg

javadoc = creates documentation

Fields & Methods

Fields = variables

Methods = functions & procedures

Tg, these two are called members of a class

Keyword = a word with special meaning in the Java language

void = a special keyword & return type that indicates that no value is returned
       ^^ Print stmnts usually fall under void methods

Parameter = information needed to be provided to certain methods before execution

Comment = placed in code for readability

- single line comments start with '//'

- multi line comments go between '/* */'

- javadoc comments go like so:

    /** (starts w/ a double asterik so it can be differentiated against multi line
     *
     *
     */

Top-level type = a data structure that can be defined independently within a source file

* You can put more than one class in a file, but only one of the classes can be public *

There are multiple ways to satisfy the main method param list:

    - String[] args
    - String options[]
    - String... friends

** when using String[] args, you can print arguments out on command line **

    e.g.

    **in command prompt** // one word input

    javac Zoo.java -> turns source file into bytecode

    java Zoo Bronx Zoo -> line 1 output: Bronx / line 2 output: Zoo

    vs.

    **in command prompt** // two word input

    javac Zoo.java -> turns source file into bytecode

    java Zoo "Nahi Bronx" zoo -> line 1 output: Nahi Bronx / line 2 output: Zoo

Packages & Imports - Help ppl understand where we get certain instantiations from

Wildcards - used to import classes in the same package

    e.g.

    import java.util.*;

    ^ '*' indicates a selection of all classes in same package, doesn't indicate the selection of child packages, fields, or methods

In order to use wildcards, the import must be specific enough until the class stage where the class you need is in order to use the asterik

Redundant Imports - imports that are unnecessary as they are already invoked by compiler automatically

    e.g.

    java.lang.*;

    &&

    java.lang.System;

In order to find redundant imports, read code up to down

    e.g.

    import java.lang.System; // redundant
    import java.lang.*;      // redundant
    import java.util.Random;
    import java.util.*;      // redundant b/c specific class that is needed already explicitly imported

For input and output class imports, below is the format:

    e.g.

    import java.nio.file.*;

Creating New Package

- Must have package declaration as a field of a sort
    - Include any classes that the package will contain
    - To test if the package creation is a success, create another package and import the first package inside the second package

Compiling and Running Code w/ Packages

    1. In same parent file, create multiple packages with classes you want each package to have exclusively
    2. Then via the command prompt, navigate to parent file
    3. Then in command prompt, turn the specific classes into class bytecode using javac

        e.g.

        javac packagea/ClassA.java packageb/ClassB.java

        Leads to create the class bytecode below -->

        packagea/classA.class && packageb/classB.class

    4. Compile using the package that imported the subclass from the other package

        e.g.

        java packageb.ClassB

Compiling to a Different Directory

- by default, javac places the bytecode class files in the file where source code is located

- if you wish to change this, use the -d to change directory where the class bytecode will be stored

    e.g.

    javac -d classes packagea/ClassA.java packageb/ClassB.java

    ^^ this changes the directory from default package directory for bytecode to classes directory
    (more neat)

    ^^ Also means that the directory you wish to change to already exists.

IMPORTANT ACRONYM:

P . I . C . F. M = Package | Imports | Classes | Fields | Methods

Javac operations:

-cp = location of classes needed to compile program

-d <dir> = location to change dir of bytecode of source files

Compiling with JAR files

<revisit this later>

Creating a JAR file

    Syntax:

    jar -cvf myNEwFile.jar .

    (to specify the dir as well, do the following below)

    jar -cvf myNewFile.jar -C dir .

    (create verbose file = cvf)

Object Creation

Calling Constructors:

    e.g.

    Park p = new Park();

    ^^ this is called instantiation of a class

    ^^ also is basically calling a constructor

Constructors:
- Cannot have return type (void, int, string, bool, etc.)

Code Block

- anything between a set of '{}' is considered a code block

- code blocks can be inside or outside of methods

    inside methods code block = execute when method called

    outside methods code block = instance initializer block

Order of initialization:

** Fields and Initializer blocks run before all methods **

Data Types

Primitive Types:

Boolean
Byte
Short
Int
Long
Float
Double
Char

^ these are literals, and they differ from String (that is not primitive)

Reference Types:

- when you assign a variable to an instantiation of a class

Primitive types can NEVER be null, whereas reference types can

Wrapper Classes:

- used to turn primitive type into reference type

** end on text block formatting for 12-20 **



